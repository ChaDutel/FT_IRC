diff --git a/incs/Channel.hpp b/incs/Channel.hpp
index eafbf33..e75c137 100644
--- a/incs/Channel.hpp
+++ b/incs/Channel.hpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 15:37:07 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/24 18:13:20 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:49:30 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -27,8 +27,8 @@ class Channel
 		std::string pass;
 		std::string	topic;
 
-		std::map<int, Client>	operators;
-		std::map<int, Client>	clients;
+		std::map<int, Client const*>	operators;
+		std::map<int, Client const*>	clients;
 
 		bool	invite_only;
 		bool	topic_rights;
@@ -54,8 +54,8 @@ class Channel
 		std::string const&				get_name() const;
 		std::string const&				get_pass() const;
 		std::string const&				get_topic() const;
-		std::map<int, Client> const&	get_clients_map() const;
-		std::map<int, Client> const&	get_operators_map() const;
+		std::map<int, Client const*> const&	get_clients_map() const;
+		std::map<int, Client const*> const&	get_operators_map() const;
 		bool const&						get_invite_only() const;
 		bool const&						get_topic_rights() const;
 		bool const&						get_need_pass() const;
@@ -69,6 +69,7 @@ class Channel
 		bool		check_pass(std::string const& pass) const;
 		std::string	list_clients() const;
 		void		send_namreply(std::string const& chan_name, Client const& sender);
+		void		kick_client(Client const& client, std::vector<std::string> const& vec_msg, Client const& target);
 
 		void	add_operator(Client const& client);
 		void	add_client(Client const& client);
diff --git a/incs/Exceptions.hpp b/incs/Exceptions.hpp
index bd3e739..141f5fc 100644
--- a/incs/Exceptions.hpp
+++ b/incs/Exceptions.hpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 10:12:02 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/25 15:25:12 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 16:48:13 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -58,4 +58,5 @@ class	TooManyPassException			: public ClientInputException {public: virtual char
 class	NeedPassException				: public ClientInputException {public: virtual char const*	what() const throw();};
 class	IncorrectChannelPassException	: public ClientInputException {public: virtual char const*	what() const throw();};
 class	CannotRemoveOperatorException	: public ClientInputException {public: virtual char const*	what() const throw();};
+class	CannotKickOperatorException		: public ClientInputException {public: virtual char const*	what() const throw();};
 
diff --git a/incs/Server.hpp b/incs/Server.hpp
index 617b1b7..c6cd7c7 100644
--- a/incs/Server.hpp
+++ b/incs/Server.hpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 10:22:14 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/25 14:42:48 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 16:45:09 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -95,6 +95,7 @@ class	Server
 		void	cmd_join(std::string& client_msg, int const client_fd);
 		void	cmd_topic(std::string& client_msg, int const client_fd);
 		void	cmd_mode(std::string& client_msg, int const client_fd);
+		void	cmd_kick(std::string& client_msg, int const client_fd);
 
 		void	privmsg_client_handler(std::string const& client_name, int const client_fd, std::vector<std::string> const& msg);
 		void	privmsg_channel_handler(std::string const& channel_name, int const client_fd, std::vector<std::string> const& msg);
diff --git a/incs/utils.hpp b/incs/utils.hpp
index 3957f83..2623957 100644
--- a/incs/utils.hpp
+++ b/incs/utils.hpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 11:32:44 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/23 19:38:28 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:51:36 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -34,9 +34,11 @@ int		check_syntax(std::string const& str);
 
 template<typename T1, typename T2> //T1 = int / std::string | T2 = Client / Channel
 bool	check_existence(std::string const& name, std::map<T1, T2> const& argmap);
+template<typename T1, typename T2> //T1 = int / std::string | T2 = Client / Channel
+bool	check_existence_ptr(std::string const& name, std::map<T1, T2> const& argmap);
 
-void	add_client_to_map(Client const& client, std::map<int, Client>& clientmap);
-void	remove_client_from_map(Client const& client, std::map<int, Client>& clientmap);
+void	add_client_to_map(Client const& client, std::map<int, Client const*>& clientmap);
+void	remove_client_from_map(Client const& client, std::map<int, Client const*>& clientmap);
 int		get_client_fd_by_name(std::string const& receiver, std::map<int, Client> const& clients);
 
 std::vector<std::string>	split_str_to_vector(std::string const& str, char const delim);
diff --git a/srcs/Channel.cpp b/srcs/Channel.cpp
index b076071..a52f80d 100644
--- a/srcs/Channel.cpp
+++ b/srcs/Channel.cpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 15:37:53 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/25 15:19:06 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:49:30 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -51,8 +51,8 @@ void	Channel::set_user_limit(int const limit) {this->user_limit = limit;}
 std::string const&				Channel::get_name() const {return (this->name);}
 std::string const&				Channel::get_pass() const {return (this->pass);}
 std::string const&				Channel::get_topic() const {return (this->topic);}
-std::map<int, Client> const&	Channel::get_clients_map() const {return (this->clients);}
-std::map<int, Client> const&	Channel::get_operators_map() const {return (this->operators);}
+std::map<int, Client const*> const&	Channel::get_clients_map() const {return (this->clients);}
+std::map<int, Client const*> const&	Channel::get_operators_map() const {return (this->operators);}
 bool const&						Channel::get_invite_only() const {return (this->invite_only);}
 bool const&						Channel::get_topic_rights() const {return (this->topic_rights);}
 bool const&						Channel::get_need_pass() const {return (this->need_pass);}
@@ -74,7 +74,7 @@ Channel&	Channel::operator=(Channel const& rhs)
 /* ************************************************************************** */
 void	Channel::send_message(std::string const& msg, int const client_fd) const
 {
-	std::map<int, Client>::const_iterator	it = this->clients.begin();
+	std::map<int, Client const*>::const_iterator	it = this->clients.begin();
 
 	while (it != this->clients.end())
 	{
@@ -88,12 +88,12 @@ bool	Channel::check_pass(std::string const& pass) const	{return (this->pass == p
 
 std::string	Channel::list_clients() const
 {
-	std::map<int, Client>::const_iterator	it = this->clients.begin();
+	std::map<int, Client const*>::const_iterator	it = this->clients.begin();
 	std::string	str;
 
 	while (it != this->clients.end())
 	{
-		str += "@" + it->second.get_name();
+		str += "@" + it->second->get_name();
 		it++;
 		if (it != this->clients.end())
 			str += " ";
@@ -112,9 +112,9 @@ void	Channel::send_namreply(std::string const& chan_name, Client const& sender)
 	std::string	server_msg;
 
 	tmp.erase(0, 1);
-	for (std::map<int, Client>::const_iterator it = this->clients.begin(); it != this->clients.end(); it++)
+	for (std::map<int, Client const*>::const_iterator it = this->clients.begin(); it != this->clients.end(); it++)
 	{
-		server_msg = "353 " + sender.get_name() + " = " + tmp + " :" + sender.get_name() + "{ " + it->second.get_name() + "}\r\n";
+		server_msg = "353 " + sender.get_name() + " = " + tmp + " :" + sender.get_name() + "{ " + it->second->get_name() + "}\r\n";
 		send(sender.get_client_fd(), server_msg.c_str(), server_msg.size(), 0);
 	}
 }
diff --git a/srcs/Client.cpp b/srcs/Client.cpp
index d6484f8..b837824 100644
--- a/srcs/Client.cpp
+++ b/srcs/Client.cpp
@@ -3,15 +3,16 @@
 /*                                                        :::      ::::::::   */
 /*   Client.cpp                                         :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
-/*   By: ljohnson <ljohnson@student.42lyon.fr>      +#+  +:+       +#+        */
+/*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 11:44:37 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/16 16:14:55 by ljohnson         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:31:09 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include <Client.hpp>
 #include <Exceptions.hpp>
+#include <defines.hpp>
 
 /* ************************************************************************** */
 /* Constructors & Destructors */
@@ -30,6 +31,7 @@ Client::Client(Client const& src) {*this = src;}
 // public
 Client::~Client()
 {
+	std::cout << RED << BOLD << UNDERLINE << "OUAFOUAFOUAF" << std::endl;
 	close (this->client_fd);
 }
 
@@ -97,4 +99,4 @@ Client&	Client::operator=(Client const& rhs)
 /* ************************************************************************** */
 /* Member Functions */
 /* ************************************************************************** */
-bool	Client::is_authentified() const {return (this->auth[0] && this->auth[1] && this->auth[2]);}
\ No newline at end of file
+bool	Client::is_authentified() const {return (this->auth[0] && this->auth[1] && this->auth[2]);}
diff --git a/srcs/Exceptions.cpp b/srcs/Exceptions.cpp
index e33d5a0..151d390 100644
--- a/srcs/Exceptions.cpp
+++ b/srcs/Exceptions.cpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 10:14:30 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/25 15:25:54 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 16:48:33 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -57,3 +57,4 @@ char const*	TooManyPassException::what()			const throw() {return ("ERROR: Too ma
 char const*	NeedPassException::what()				const throw() {return ("ERROR: No password found, need one");}
 char const*	IncorrectChannelPassException::what()	const throw() {return ("ERROR: Incorrect channel password specified");}
 char const*	CannotRemoveOperatorException::what()	const throw() {return ("ERROR: Cannot remove specified operator");}
+char const*	CannotKickOperatorException::what()		const throw() {return ("ERROR: Cannot kick an operator");}
diff --git a/srcs/channel_cmd_handler.cpp b/srcs/channel_cmd_handler.cpp
index ec21a10..26b33f7 100644
--- a/srcs/channel_cmd_handler.cpp
+++ b/srcs/channel_cmd_handler.cpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/25 11:56:50 by cdutel-l          #+#    #+#             */
-/*   Updated: 2023/06/25 16:10:02 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:59:01 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -22,7 +22,7 @@ void	Server::cmd_topic(std::string& client_msg, int const client_fd)
 	print_msg(BOLD, BLUE, client_msg);
 
 	std::vector<std::string>	msg = split_str_to_vector(client_msg, ' ');
-	if (!check_existence(msg[1], this->channels))
+	if (!check_existence_ptr(msg[1], this->channels))
 	{
 		// send ChannelDoesNotDexist to sender
 		throw ChannelDoesNotExistException();
@@ -68,7 +68,35 @@ void	Server::cmd_topic(std::string& client_msg, int const client_fd)
 /* ************************************************************************** */
 /* KICK */
 /* ************************************************************************** */
+void	Channel::kick_client(Client const& client, std::vector<std::string> const& vec_msg, Client const& target)
+{
+	if (!check_existence(client.get_name(), this->operators))
+		throw ClientIsNotInMapException();
+	if (!check_existence(vec_msg[2], this->clients))
+		throw ClientIsNotInMapException();
+	if (check_existence(vec_msg[2], this->operators))
+		throw CannotKickOperatorException();
+	this->remove_client(target);
+	std::string	final_msg = ":" + client.get_name() + "!" + client.get_username() + "@ircserv KICK " + vec_msg[1] + " " + vec_msg[2] + "\r\n";
+	send(target.get_client_fd(), final_msg.c_str(), final_msg.size(), 0);
+}
+
+void	Server::cmd_kick(std::string& client_msg, int const client_fd)
+{
+	print_msg(BOLD, BLUE, client_msg);
+
+	std::vector<std::string>	msg = split_str_to_vector(client_msg, ' ');
+	if (msg.size() < 3)
+		throw NotEnoughParamException();
+	else if (msg.size() > 3)
+		throw TooManyParamException();
+
+	if (!check_existence_ptr(msg[1], this->channels))
+		throw ChannelDoesNotExistException();
+	this->channels[msg[1]].kick_client(this->clients[client_fd], msg, this->clients[get_client_fd_by_name(msg[2], this->clients)]);
+}
 // KICK #Finnish Matthew           ; Command to kick Matthew from #Finnish
+//:WiZ!jto@tolsun.oulu.fi KICK #Finnish John
 
 /* ************************************************************************** */
 /* MODE */
@@ -85,7 +113,7 @@ void	Server::cmd_mode(std::string& client_msg, int const client_fd)
 		throw NotEnoughParamException();
 	if (msg[2].size() > 2)
 		throw TooManyParamException();
-	if (!check_existence(msg[1], this->channels))
+	if (!check_existence_ptr(msg[1], this->channels))
 	{
 		// send ChannelDoesNotDexist to sender
 		throw ChannelDoesNotExistException();
@@ -115,7 +143,10 @@ void	Server::cmd_mode(std::string& client_msg, int const client_fd)
 			if (sign == false)
 				this->channels[msg[1]].set_invite_only(false);
 			else
+			{
 				this->channels[msg[1]].set_invite_only(true);
+				
+			}
 			break;
 		}
 		case 't':
@@ -182,6 +213,8 @@ void	Server::cmd_mode(std::string& client_msg, int const client_fd)
 			throw WrongSyntaxException();
 		}
 	}
+	std::string	final_msg = ":" + this->name + " " + client_msg + "\r\n";
+	send(client_fd, final_msg.c_str(), final_msg.size(), 0);
 }
 
 /*
diff --git a/srcs/cmd_join.cpp b/srcs/cmd_join.cpp
index da2234d..03fb1d4 100644
--- a/srcs/cmd_join.cpp
+++ b/srcs/cmd_join.cpp
@@ -48,7 +48,7 @@ void	Server::cmd_join(std::string& client_msg, int const client_fd)
 	{
 		try
 		{
-			if (!check_existence(vec_chan[i], this->channels))
+			if (!check_existence_ptr(vec_chan[i], this->channels))
 			{
 				// create channel
 				Channel	channel_tmp;
diff --git a/srcs/cmd_privmsg.cpp b/srcs/cmd_privmsg.cpp
index 9421164..fab04c1 100644
--- a/srcs/cmd_privmsg.cpp
+++ b/srcs/cmd_privmsg.cpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/20 16:25:56 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/25 13:55:44 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:57:58 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -31,12 +31,12 @@ void	Server::privmsg_client_handler(std::string const& client_name, int const cl
 
 void	Server::privmsg_channel_handler(std::string const& channel_name, int const client_fd, std::vector<std::string> const& msg)
 {
-	if (!check_existence<std::string, Channel>(channel_name, this->channels))
+	if (!check_existence_ptr(channel_name, this->channels))
 	{
 		// send ChannelDoesNotExist to sender
 		throw ChannelDoesNotExistException();
 	}
-	if (!check_existence<int, Client>(this->clients[client_fd].get_name(), this->channels[channel_name].get_clients_map()))
+	if (!check_existence(this->clients[client_fd].get_name(), this->channels[channel_name].get_clients_map()))
 	{
 		// send ClientIsNotInChannel to sender
 		throw ClientIsNotInChannelException();
diff --git a/srcs/command_handler.cpp b/srcs/command_handler.cpp
index 281269a..4b2a24c 100644
--- a/srcs/command_handler.cpp
+++ b/srcs/command_handler.cpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 13:47:12 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/25 15:59:48 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:56:56 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -64,7 +64,7 @@ void	Server::cmd_nick(std::string& client_msg, int const client_fd)
 		throw WrongNicknameException();
 	else
 	{
-		if (check_existence<int, Client>(chosen_nickname, this->clients))
+		if (check_existence_ptr(chosen_nickname, this->clients))
 		{
 			std::string	server_msg = "433 " + this->clients[client_fd].get_name();
 			server_msg += " " + chosen_nickname + " : Nickname is already in use\r\n";
@@ -108,6 +108,8 @@ void	Server::command_handler(std::string client_msg, int client_fd)
 			cmd_topic(client_msg, client_fd);
 		if (client_msg.substr(0, 4) == "MODE" && client_msg.size() > 4)
 			cmd_mode(client_msg, client_fd);
+		if (client_msg.substr(0, 4) == "KICK" && client_msg.size() > 4)
+			cmd_kick(client_msg, client_fd);
 	}
 	else
 	{
diff --git a/srcs/utils.cpp b/srcs/utils.cpp
index 82600ec..a3e4557 100644
--- a/srcs/utils.cpp
+++ b/srcs/utils.cpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 11:32:16 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/24 18:32:24 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:57:43 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -60,15 +60,16 @@ int	check_syntax(std::string const& str)
 	return (1);
 }
 
-void	add_client_to_map(Client const& client, std::map<int, Client>& clientmap)
+void	add_client_to_map(Client const& client, std::map<int, Client const*>& clientmap)
 {
 	if (check_existence(client.get_name(), clientmap))
 		throw ClientAlreadyInMapException();
 
-	clientmap[client.get_client_fd()] = client;
+	// clientmap.insert(std::pair<int, Client const*>(client.get_client_fd(), client));
+	clientmap[client.get_client_fd()] = &client;
 }
 
-void	remove_client_from_map(Client const& client, std::map<int, Client>& clientmap)
+void	remove_client_from_map(Client const& client, std::map<int, Client const*>& clientmap)
 {
 	if (!check_existence(client.get_name(), clientmap))
 		throw ClientIsNotInMapException();
diff --git a/tmpt/utils.tpp b/tmpt/utils.tpp
index 9928032..1d28c8d 100644
--- a/tmpt/utils.tpp
+++ b/tmpt/utils.tpp
@@ -6,7 +6,7 @@
 /*   By: cdutel-l <cdutel-l@student.42lyon.fr>      +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2023/06/13 11:36:07 by ljohnson          #+#    #+#             */
-/*   Updated: 2023/06/23 19:38:12 by cdutel-l         ###   ########lyon.fr   */
+/*   Updated: 2023/06/25 17:56:20 by cdutel-l         ###   ########lyon.fr   */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -30,6 +30,19 @@ T	print_msg(std::string const& message, T const val)
 
 template<typename T1, typename T2> //T1 = int / std::string | T2 = Client / Channel
 bool	check_existence(std::string const& name, std::map<T1, T2> const& argmap)
+{
+	typename std::map<T1, T2>::const_iterator	it = argmap.begin();
+	while (it != argmap.end())
+	{
+		if (it->second->get_name() == name)
+			return (true);
+		it++;
+	}
+	return (false);
+}
+
+template<typename T1, typename T2> //T1 = int / std::string | T2 = Client / Channel
+bool	check_existence_ptr(std::string const& name, std::map<T1, T2> const& argmap)
 {
 	typename std::map<T1, T2>::const_iterator	it = argmap.begin();
 	while (it != argmap.end())
@@ -40,3 +53,4 @@ bool	check_existence(std::string const& name, std::map<T1, T2> const& argmap)
 	}
 	return (false);
 }
+
